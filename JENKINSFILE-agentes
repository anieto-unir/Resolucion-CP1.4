//
// CI-agentes
//
pipeline {
    agent none

    stages {
        stage('Get Code') {
            agent any
            steps {
                deleteDir()
                withCredentials([string(credentialsId: 'URL-test-todo', variable: 'URL')]) {
                    sh '''
                        git clone ${URL} .
                        git checkout develop
                        wget https://raw.githubusercontent.com/anieto-unir/todo-list-aws-config/refs/heads/staging/samconfig.toml
                    '''
                }
                echo "Code"
                stash name:'code', includes:'**', useDefaultExcludes: false
                deleteDir()
            }
        }

        stage('Static') {
            agent {label 'testing'}
            steps {
                deleteDir()
                unstash name:'code'
                sh '''
                    python3 -m flake8 --exit-zero --format=pylint src >flake8.out
                    python3 -m bandit --exit-zero -r src -f custom -o bandit.out --severity-level medium --msg-template "{abspath}:{line}: [{test_id}] {msg}"
                '''
                recordIssues tools: [flake8(name: 'Flake8', pattern: 'flake8.out')]
                recordIssues tools: [pyLint(name: 'Bandit', pattern: 'bandit.out')]
                deleteDir()
            }
        }

        stage('Deploy') {
            agent {label 'deployment'}
            steps {
                deleteDir()
                unstash name:'code'
                sh '''
                   sam build
                   sam deploy --resolve-s3 --stack-name "todo-list-aws-staging" --region "us-east-1" --no-fail-on-empty-changeset --parameter-overrides Stage=staging
                   BASE_URL=$(aws cloudformation describe-stacks --stack-name todo-list-aws-staging --query 'Stacks[0].Outputs[?OutputKey==`BaseUrlApi`].OutputValue' --output text)
                   echo "export BASE_URL=${BASE_URL}" > env.sh
                   chmod a+x env.sh
                   echo "La URL de la API es: ${BASE_URL}"
                '''
                stash name:'test-env', includes:'env.sh'
                deleteDir()
            }
        }
        
        stage('Test')
        {
            agent {label 'testing'}
            steps {
                deleteDir()
                unstash name:'test-env'
                unstash name:'code'
                sh '''
                   . ./env.sh
                   python3 -m pytest --junit-xml=result-int.xml test/integration/todoApiTest.py
                '''
                junit allowEmptyResults: true, testResults:'result-int.xml'
                script
                {
                    if (currentBuild.result == 'UNSTABLE')
                        error("")
                }
                deleteDir()
            }
        }
        
        stage('Promote')
        {
            agent any
            steps {
                deleteDir()
                unstash name:'code'
                sh '''
                   git checkout master
                   git config merge.ours.driver true
                   git merge develop --no-edit
                   git push
                '''
                deleteDir()
            }
        }
    }
}
